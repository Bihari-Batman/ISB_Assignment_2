# -*- coding: utf-8 -*-
"""negotiation_streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hS0C5fWVdTgg39uZNoaGsldjWfX9VL8d
"""

import os
os.environ['PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION'] = 'python'
import streamlit as st
import random

# Initialize session state once at the beginning
if 'initial_offer' not in st.session_state or 'reset' in st.session_state:
    st.session_state.initial_offer = random.choice([250, 500, 750, 1000])
    st.session_state.acceptable_offer = st.session_state.initial_offer * 0.8
    st.session_state.show_second_offer = False
    st.session_state.second_offer = None

def display_decision(decision_message):
    st.success(decision_message)
    if st.button("Restart"):
        st.session_state.clear()
        st.experimental_rerun()

def handle_counteroffer(initial_offer, acceptable_offer, counteroffer):
    if counteroffer > acceptable_offer:
        display_decision(f"Seller accepts your offer. Agreed upon price: ${counteroffer:.2f}. Negotiation terminates.")
    else:
        second_offer = max((initial_offer + counteroffer) / 2, acceptable_offer)
        st.session_state.second_offer = second_offer
        st.session_state.show_second_offer = True

def main():
    st.title("Negotiation Survey")

    initial_offer = st.session_state.initial_offer
    acceptable_offer = st.session_state.acceptable_offer
    st.write(f"The computer offers you a price of ${initial_offer:.2f}. What would you like to do?")

    action = st.selectbox("Choose an option (accept/reject/counteroffer):",
                          ["", "accept", "reject", "counteroffer"], key="main_action")

    if action == "accept":
        display_decision(f"Agreed upon price: ${initial_offer:.2f}. Negotiation terminates.")
    elif action == "reject":
        st.error("Agreement could not be reached. Negotiation terminates.")
    elif action == "counteroffer":
        counteroffer = st.number_input("Enter your counteroffer (greater than 0 and less than the initial offer):",
                                       min_value=0.01, max_value=initial_offer-0.01, step=0.01, format="%.2f", key="counteroffer")
        if st.button("Submit Counteroffer"):
            handle_counteroffer(initial_offer, acceptable_offer, counteroffer)

    # Second offer interaction
    if st.session_state.show_second_offer:
        st.write(f"Second offer from the computer: ${st.session_state.second_offer:.2f}")
        second_action = st.selectbox("Choose an option for the second offer (accept/reject):",
                                     ["", "accept", "reject"], key="second_action")
        if second_action:
            if second_action == "accept":
                display_decision(f"Agreed upon price: ${st.session_state.second_offer:.2f}. Negotiation terminates.")
            elif second_action == "reject":
                st.error("Agreement could not be reached. Negotiation terminates.")
            st.session_state.show_second_offer = False

if __name__ == '__main__':
    main()

